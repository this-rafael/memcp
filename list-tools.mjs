#!/usr/bin/env node

console.log('üìã === FERRAMENTAS E RECURSOS DO MCP MEMCP === üìã\n');

// Lista completa de ferramentas dispon√≠veis
const tools = [
  {
    name: "init",
    category: "üîß Inicializa√ß√£o",
    description: "Initialize memory system for a project",
    params: ["project_path"]
  },
  {
    name: "validate_system", 
    category: "üîß Manuten√ß√£o",
    description: "Validate system integrity",
    params: ["project_path"]
  },
  {
    name: "memory_main_get",
    category: "üìÑ Mem√≥ria Principal", 
    description: "Get main memory or specific section",
    params: ["project_path", "section?"]
  },
  {
    name: "memory_main_update",
    category: "üìÑ Mem√≥ria Principal",
    description: "Update main memory section", 
    params: ["project_path", "section", "data"]
  },
  {
    name: "memory_main_add_context",
    category: "üìÑ Mem√≥ria Principal",
    description: "Add new context to main memory",
    params: ["project_path", "name", "description", "priority"]
  },
  {
    name: "links_create",
    category: "üîó Links",
    description: "Create new link",
    params: ["project_path", "context", "subcontext", "description", "memory_path"]
  },
  {
    name: "links_read",
    category: "üîó Links", 
    description: "Read links for context/subcontext",
    params: ["project_path", "context", "subcontext?"]
  },
  {
    name: "memory_create",
    category: "üí≠ Mem√≥rias",
    description: "Create new memory",
    params: ["project_path", "context", "subcontext", "title", "content", "tags?", "importance?"]
  },
  {
    name: "memory_read",
    category: "üí≠ Mem√≥rias",
    description: "Read memory by path", 
    params: ["project_path", "memory_path"]
  },
  {
    name: "search_memories",
    category: "üîç Busca",
    description: "Search memories with full-text search",
    params: ["project_path", "query", "options?"]
  },
  {
    name: "get_memory_tree",
    category: "üå≥ Navega√ß√£o",
    description: "Get memory tree structure",
    params: ["project_path", "context?", "depth?"]
  },
  {
    name: "get_filesystem_tree", 
    category: "üå≥ Navega√ß√£o",
    description: "Get file system tree structure with file types",
    params: ["project_path"]
  },
  {
    name: "stats",
    category: "üìä Estat√≠sticas",
    description: "Get system statistics",
    params: ["project_path"]
  }
];

// Recursos dispon√≠veis
const resources = [
  {
    name: "Main Memory",
    uri: "memory://main",
    description: "Current main memory configuration and contexts"
  },
  {
    name: "Memory Tree", 
    uri: "memory://tree",
    description: "Hierarchical view of all memories organized by context"
  },
  {
    name: "System Statistics",
    uri: "memory://stats", 
    description: "System usage statistics and health metrics"
  }
];

console.log('üõ†Ô∏è  **FERRAMENTAS DISPON√çVEIS** üõ†Ô∏è\n');

// Agrupar por categoria
const categories = {};
tools.forEach(tool => {
  if (!categories[tool.category]) {
    categories[tool.category] = [];
  }
  categories[tool.category].push(tool);
});

Object.entries(categories).forEach(([category, toolList]) => {
  console.log(`**${category}**`);
  toolList.forEach(tool => {
    console.log(`  ‚îú‚îÄ \`${tool.name}\``);
    console.log(`  ‚îÇ  üìù ${tool.description}`);
    console.log(`  ‚îÇ  üìã Par√¢metros: ${tool.params.join(', ')}`);
    console.log(`  ‚îÇ`);
  });
  console.log('');
});

console.log('üìö **RECURSOS DISPON√çVEIS** üìö\n');

resources.forEach(resource => {
  console.log(`  ‚îú‚îÄ **${resource.name}**`);
  console.log(`  ‚îÇ  üîó URI: \`${resource.uri}\``);
  console.log(`  ‚îÇ  üìù ${resource.description}`);
  console.log(`  ‚îÇ`);
});

console.log('\nüìñ **COMO USAR AS FERRAMENTAS** üìñ\n');

console.log('**Via Cliente MCP:**');
console.log('```json');
console.log('{');
console.log('  "method": "tools/call",');
console.log('  "params": {');
console.log('    "name": "memory_create",');
console.log('    "arguments": {');
console.log('      "project_path": "/path/to/project",');
console.log('      "context": "desenvolvimento",'); 
console.log('      "subcontext": "frontend",');
console.log('      "title": "Componentes React",');
console.log('      "content": "# Componentes\\n\\nDetalhes..."');
console.log('    }');
console.log('  }');
console.log('}');
console.log('```\n');

console.log('**Via Terminal (para teste):**');
console.log('```bash');
console.log('# Instalar o memcp globalmente');
console.log('npm install -g /path/to/memcp');
console.log('');
console.log('# Inicializar um projeto');
console.log('memcp init /path/to/project');
console.log('');
console.log('# Ver estat√≠sticas');
console.log('memcp stats /path/to/project');
console.log('```\n');

console.log('üìä **ESTAT√çSTICAS DO SISTEMA** üìä\n');
console.log(`Total de ferramentas: ${tools.length}`);
console.log(`Total de recursos: ${resources.length}`);
console.log(`Categorias dispon√≠veis: ${Object.keys(categories).length}`);

const categoryBreakdown = Object.entries(categories)
  .map(([cat, tools]) => `${cat}: ${tools.length}`)
  .join(', ');

console.log(`Distribui√ß√£o: ${categoryBreakdown}`);

console.log('\n‚ú® **O MCP memcp oferece um sistema completo para gerenciamento de mem√≥ria inteligente!** ‚ú®');
