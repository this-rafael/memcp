#!/usr/bin/env node

/**
 * Demo do Memory Organizer com an√°lise simples
 */

import { promises as fs } from 'fs';
import path from 'path';

async function demonstrateMemoryOrganizer() {
  console.log("ü§ñ MemCP Memory Organizer - YOLO Mode Demo");
  console.log("==========================================\n");

  const projectPath = "/home/wisiex/work/azify-liquidity-engine";
  const memoryPath = path.join(projectPath, "ia-memory");
  
  try {
    // Check if project has memory
    await fs.access(memoryPath);
    console.log(`üìÅ Analyzing project: ${projectPath}`);
    
    // Read main memory file
    const mainMemoryFile = path.join(memoryPath, "main.sjson");
    
    try {
      const mainMemoryContent = await fs.readFile(mainMemoryFile, 'utf8');
      const mainMemory = JSON.parse(mainMemoryContent);
      
      console.log("\nüìä AN√ÅLISE AUTOM√ÅTICA:");
      console.log(`  - Total de contextos: ${Object.keys(mainMemory.contexts || {}).length}`);
      console.log(`  - Projeto: ${mainMemory.project_name}`);
      console.log(`  - Arquitetura: ${mainMemory.core_info?.architecture || 'N/A'}`);
      
      // Basic analysis
      const contextsCount = Object.keys(mainMemory.contexts || {}).length;
      const hasArchitecture = Boolean(mainMemory.contexts?.["Arquitetura e Padroniza√ß√£o"]);
      const hasModules = Boolean(mainMemory.contexts?.["modules"]);
      
      console.log("\nüéØ RECOMENDA√á√ïES AUTOM√ÅTICAS (YOLO):");
      
      if (contextsCount > 8) {
        console.log("  ‚ö° ALTA PRIORIDADE: Muitos contextos detectados");
        console.log("     ‚Üí Sugiro criar contexto 'consolidation' para organizar");
      }
      
      if (hasArchitecture && hasModules) {
        console.log("  üîó M√âDIA PRIORIDADE: Detectado padr√£o arquitetural");
        console.log("     ‚Üí Sugiro criar links entre m√≥dulos e arquitetura");
      }
      
      console.log("  üìù BAIXA PRIORIDADE: Criar mem√≥ria organizacional");
      console.log("     ‚Üí √çndice de navega√ß√£o para facilitar busca");
      
      // Simulate some organization actions
      console.log("\nüöÄ SIMULANDO A√á√ïES DO YOLO MODE:");
      console.log("  ‚úÖ Analisando contextos relacionados...");
      console.log("  ‚úÖ Identificando padr√µes de nomenclatura...");
      console.log("  ‚úÖ Verificando consist√™ncia estrutural...");
      
      // Create a simple organizational memory as demo
      const organizationContent = `# ü§ñ Mem√≥ria Organizacional - Criada Automaticamente

## An√°lise do Sistema
- **Projeto**: ${mainMemory.project_name}
- **Contextos ativos**: ${contextsCount}
- **√öltima an√°lise**: ${new Date().toISOString()}

## Estrutura Detectada
${hasArchitecture ? '‚úÖ Arquitetura bem definida' : '‚ö†Ô∏è Arquitetura precisa ser melhor estruturada'}
${hasModules ? '‚úÖ M√≥dulos organizados' : '‚ö†Ô∏è M√≥dulos precisam de organiza√ß√£o'}

## Pr√≥ximas A√ß√µes Recomendadas
1. Criar links entre mem√≥rias relacionadas
2. Consolidar contextos similares
3. Estabelecer hierarquia clara de prioridades

---
*Criado automaticamente pelo Memory Organizer em modo YOLO*`;

      const demoFile = path.join(memoryPath, 'demo-organization.md');
      await fs.writeFile(demoFile, organizationContent, 'utf8');
      
      console.log(`  ‚úÖ Mem√≥ria organizacional criada: ${demoFile}`);
      
    } catch (fileError) {
      console.log("  ‚ö†Ô∏è Arquivo main.sjson n√£o encontrado - projeto pode n√£o estar inicializado");
    }
    
  } catch (error) {
    console.log(`  ‚ùå Projeto n√£o tem sistema de mem√≥ria inicializado: ${projectPath}`);
    console.log("     Execute: memcp init --project-path " + projectPath);
  }
  
  console.log("\nüéâ Demo conclu√≠da!");
  console.log("\nüí° Para usar o sistema completo:");
  console.log("   memcp --paths '/path/to/project1,/path/to/project2' --yolo");
}

demonstrateMemoryOrganizer().catch(console.error);
