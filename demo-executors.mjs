#!/usr/bin/env node

/**
 * Demonstra√ß√£o pr√°tica das ferramentas MCP dos Executors
 * 
 * Este script simula o uso das ferramentas MCP atrav√©s de chamadas diretas
 * √†s classes, mostrando como elas funcionariam quando invocadas por um cliente MCP.
 */

import { CriticTools } from './dist/tools/critic.tool.js';

async function demonstrateKritiq() {
  console.log('üîç === DEMONSTRA√á√ÉO: Kritiq (An√°lise Cr√≠tica) ===\n');

  const critic = new CriticTools();

  const command = `
Crie uma fun√ß√£o em JavaScript que calcule o fatorial de um n√∫mero.
A fun√ß√£o deve:
- Aceitar um n√∫mero como par√¢metro
- Retornar o fatorial do n√∫mero
- Tratar casos especiais (0, 1, n√∫meros negativos)
- Ser eficiente e leg√≠vel
  `.trim();

  const generatedResponse = `
function factorial(n) {
  if (n < 0) return undefined;
  if (n === 0 || n === 1) return 1;
  return n * factorial(n - 1);
}
  `.trim();

  console.log('üìÑ **Comando Original:**');
  console.log(command);
  console.log('\nüì¶ **Resposta Gerada:**');
  console.log(generatedResponse);
  console.log('\nüîç **An√°lise Cr√≠tica:**');

  try {
    const analysis = await critic.kritiqPt(command, generatedResponse, 60);
    console.log(analysis);
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error.message);
  }
}

async function demonstrateSimpleEvaluation() {
  console.log('\n\n‚úÖ === DEMONSTRA√á√ÉO: Avalia√ß√£o Simples ===\n');

  const critic = new CriticTools();

  const command = 'Liste os arquivos do diret√≥rio atual';
  const terminalResult = await critic.executeCommand('ls -la | head -5');

  console.log('üìÑ **Comando:** ' + command);
  console.log('\nüì¶ **Resultado do Terminal:**');
  console.log(terminalResult);

  console.log('\nüîç **Avalia√ß√£o do Resultado:**');

  try {
    const evaluation = await critic.evaluateWithGemini(command, terminalResult, 60);
    console.log(evaluation);
  } catch (error) {
    console.error('‚ùå Erro na avalia√ß√£o:', error.message);
  }
}

async function demonstrateTerminalExecution() {
  console.log('\n\n‚ö° === DEMONSTRA√á√ÉO: Execu√ß√£o de Terminal ===\n');

  const critic = new CriticTools();

  console.log('üìã **Informa√ß√µes do Sistema de Execu√ß√£o:**');
  const execInfo = critic.getExecutionInfo();
  console.log('- Diret√≥rio:', execInfo.workingDirectory);
  console.log('- Shell:', execInfo.terminalInfo.shell);

  console.log('\nüìã **Executando Comandos:**');

  const commands = [
    'pwd',
    'whoami',
    'date',
    'echo "Teste de executor funcionando!"'
  ];

  for (const cmd of commands) {
    console.log(`\n$ ${cmd}`);
    try {
      const result = await critic.executeCommand(cmd);
      console.log(result.trim());
    } catch (error) {
      console.error(`‚ùå Erro: ${error.message}`);
    }
  }
}

async function demonstrateEnvironmentManagement() {
  console.log('\n\nüåç === DEMONSTRA√á√ÉO: Gerenciamento de Ambiente ===\n');

  const critic = new CriticTools();

  // Definir uma vari√°vel de ambiente
  console.log('üìã **Definindo vari√°veis de ambiente:**');
  critic.setEnvironmentVariable('DEMO_VAR', 'Hello from MemCP!');
  critic.setEnvironmentVariable('NODE_ENV', 'demonstration');

  // Verificar as vari√°veis
  const commands = [
    'echo "DEMO_VAR: $DEMO_VAR"',
    'echo "NODE_ENV: $NODE_ENV"',
    'echo "Current PATH (first 100 chars): ${PATH:0:100}..."'
  ];

  for (const cmd of commands) {
    console.log(`\n$ ${cmd}`);
    try {
      const result = await critic.executeCommand(cmd);
      console.log(result.trim());
    } catch (error) {
      console.error(`‚ùå Erro: ${error.message}`);
    }
  }

  // Verificar atrav√©s do m√©todo getter
  console.log('\nüìã **Verifica√ß√£o via m√©todo getter:**');
  console.log('DEMO_VAR:', critic.getEnvironmentVariable('DEMO_VAR'));
  console.log('NODE_ENV:', critic.getEnvironmentVariable('NODE_ENV'));
  console.log('UNDEFINED_VAR:', critic.getEnvironmentVariable('UNDEFINED_VAR', 'valor_padr√£o'));
}

async function main() {
  console.log('üöÄ === DEMONSTRA√á√ÉO COMPLETA DOS EXECUTORS MEMCP ===\n');
  console.log('Este script demonstra as capacidades dos executors criados em TypeScript\n');

  try {
    await demonstrateTerminalExecution();
    await demonstrateEnvironmentManagement();
    
    // S√≥ executar testes do Gemini se estiver dispon√≠vel
    try {
      const critic = new CriticTools();
      await critic.executeCommand('which gemini');
      
      await demonstrateSimpleEvaluation();
      await demonstrateKritiq();
    } catch (error) {
      console.log('\n‚ö†Ô∏è Gemini n√£o dispon√≠vel - pulando demonstra√ß√µes de an√°lise cr√≠tica');
      console.log('   Para testar an√°lise cr√≠tica, instale o Gemini CLI:');
      console.log('   npm install -g @google/generative-ai-cli');
    }

  } catch (error) {
    console.error('‚ùå Erro durante demonstra√ß√£o:', error);
  }

  console.log('\n‚ú® === DEMONSTRA√á√ÉO CONCLU√çDA ===');
  console.log('\nOs executors est√£o prontos para uso via MCP!');
  console.log('Ferramentas dispon√≠veis:');
  console.log('- kritiq: An√°lise cr√≠tica detalhada');
  console.log('- evaluate_with_gemini: Avalia√ß√£o simples');
  console.log('- execute_terminal_command: Execu√ß√£o de comandos');
}

main().catch(console.error);
